/**
 * 全局混入函数 (Mixins)
 * 提供常用的样式混入，提高开发效率和代码复用性
 */

// ==================== 布局混入 ====================

/**
 * Flex 居中布局
 */
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

/**
 * Flex 水平居中
 */
@mixin flex-center-horizontal {
  display: flex;
  justify-content: center;
}

/**
 * Flex 垂直居中
 */
@mixin flex-center-vertical {
  display: flex;
  align-items: center;
}

/**
 * Flex 两端对齐
 */
@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

/**
 * Flex 左对齐
 */
@mixin flex-start {
  display: flex;
  align-items: center;
  justify-content: flex-start;
}

/**
 * Flex 右对齐
 */
@mixin flex-end {
  display: flex;
  align-items: center;
  justify-content: flex-end;
}

/**
 * Flex 环绕对齐
 */
@mixin flex-around {
  display: flex;
  align-items: center;
  justify-content: space-around;
}

/**
 * Flex 列布局
 */
@mixin flex-column {
  display: flex;
  flex-direction: column;
}

/**
 * Flex 列居中
 */
@mixin flex-column-center {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

// ==================== 文本混入 ====================

/**
 * 单行文本省略
 */
@mixin text-ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/**
 * 多行文本省略
 * @param {number} $lines - 显示行数，默认2行
 */
@mixin text-ellipsis-multiline($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}

/**
 * 文本不可选择
 */
@mixin text-no-select {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

/**
 * 文本可选择
 */
@mixin text-select {
  -webkit-user-select: text;
  -moz-user-select: text;
  -ms-user-select: text;
  user-select: text;
}

/**
 * 文本换行
 */
@mixin text-break {
  word-wrap: break-word;
  word-break: break-all;
  overflow-wrap: break-word;
}

// ==================== 按钮混入 ====================

/**
 * 按钮基础样式
 */
@mixin button-base {
  display: inline-block;
  font-weight: var(--font-weight-normal);
  text-align: center;
  vertical-align: middle;
  cursor: pointer;
  border: 1px solid transparent;
  padding: var(--input-padding-vertical) var(--button-padding-horizontal);
  font-size: var(--font-size-base);
  line-height: var(--line-height-base);
  border-radius: var(--border-radius-base);
  transition: all var(--animation-duration-base) var(--animation-timing-ease-in-out);
  user-select: none;
  touch-action: manipulation;

  &:focus,
  &:hover {
    text-decoration: none;
  }

  &:active {
    outline: 0;
    background-image: none;
  }

  &[disabled],
  &.disabled {
    cursor: not-allowed;
    opacity: 0.6;
    pointer-events: none;
  }
}

/**
 * 按钮变体样式
 * @param {color} $bg-color - 背景色
 * @param {color} $text-color - 文字色，默认白色
 * @param {color} $border-color - 边框色，默认与背景色相同
 */
@mixin button-variant($bg-color, $text-color: #fff, $border-color: $bg-color) {
  background-color: $bg-color;
  color: $text-color;
  border-color: $border-color;

  &:hover,
  &:focus {
    background-color: lighten($bg-color, 10%);
    border-color: lighten($border-color, 10%);
    color: $text-color;
  }

  &:active {
    background-color: darken($bg-color, 5%);
    border-color: darken($border-color, 5%);
    color: $text-color;
  }

  &[disabled],
  &.disabled {
    background-color: var(--color-background-disabled);
    border-color: var(--color-border-primary);
    color: var(--color-text-disabled);
  }
}

/**
 * 按钮尺寸
 * @param {number} $height - 高度
 * @param {number} $padding - 水平内边距
 * @param {number} $font-size - 字体大小
 */
@mixin button-size($height, $padding, $font-size) {
  height: $height;
  padding: 0 $padding;
  font-size: $font-size;
  line-height: $height - 2px; // 减去边框宽度
}

// ==================== 输入框混入 ====================

/**
 * 输入框基础样式
 */
@mixin input-base {
  display: inline-block;
  width: 100%;
  padding: var(--input-padding-vertical) var(--input-padding-horizontal);
  font-size: var(--font-size-base);
  line-height: var(--line-height-base);
  color: var(--color-text-primary);
  background-color: var(--color-background-primary);
  border: 1px solid var(--color-border-primary);
  border-radius: var(--border-radius-base);
  transition: all var(--animation-duration-base) var(--animation-timing-ease-in-out);

  &:focus {
    border-color: var(--color-primary);
    outline: 0;
    box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);
  }

  &[disabled],
  &.disabled {
    background-color: var(--color-background-disabled);
    color: var(--color-text-disabled);
    cursor: not-allowed;
  }

  &::placeholder {
    color: var(--color-text-tertiary);
  }
}

/**
 * 输入框状态样式
 * @param {color} $border-color - 边框色
 * @param {color} $shadow-color - 阴影色
 */
@mixin input-status($border-color, $shadow-color) {
  border-color: $border-color;

  &:focus {
    border-color: $border-color;
    box-shadow: 0 0 0 2px rgba($shadow-color, 0.2);
  }
}

// ==================== 卡片混入 ====================

/**
 * 卡片基础样式
 */
@mixin card-base {
  background: var(--color-background-primary);
  border: 1px solid var(--color-border-secondary);
  border-radius: var(--card-border-radius);
  box-shadow: var(--box-shadow-card);
  padding: var(--card-padding);
  transition: all var(--animation-duration-base) var(--animation-timing-ease-in-out);
}

/**
 * 卡片悬停效果
 */
@mixin card-hover {
  &:hover {
    box-shadow: var(--box-shadow-lg);
    transform: translateY(-2px);
  }
}

/**
 * 卡片阴影变体
 * @param {string} $shadow - 阴影样式
 */
@mixin card-shadow($shadow: var(--box-shadow-base)) {
  box-shadow: $shadow;
}

// ==================== 响应式混入 ====================

/**
 * 响应式断点
 * @param {string} $breakpoint - 断点名称 (xs, sm, md, lg, xl, xxl)
 */
@mixin respond-to($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: #{var(--breakpoint-xs) - 1px}) {
      @content;
    }
  }
  @if $breakpoint == sm {
    @media (min-width: var(--breakpoint-sm)) {
      @content;
    }
  }
  @if $breakpoint == md {
    @media (min-width: var(--breakpoint-md)) {
      @content;
    }
  }
  @if $breakpoint == lg {
    @media (min-width: var(--breakpoint-lg)) {
      @content;
    }
  }
  @if $breakpoint == xl {
    @media (min-width: var(--breakpoint-xl)) {
      @content;
    }
  }
  @if $breakpoint == xxl {
    @media (min-width: var(--breakpoint-xxl)) {
      @content;
    }
  }
}

/**
 * 响应式断点范围
 * @param {string} $min - 最小断点
 * @param {string} $max - 最大断点
 */
@mixin respond-between($min, $max) {
  @media (min-width: var(--breakpoint-#{$min})) and (max-width: #{var(--breakpoint-#{$max}) - 1px}) {
    @content;
  }
}

/**
 * 移动端优先
 */
@mixin mobile-first {
  @media (max-width: #{var(--breakpoint-md) - 1px}) {
    @content;
  }
}

/**
 * 桌面端优先
 */
@mixin desktop-first {
  @media (min-width: var(--breakpoint-lg)) {
    @content;
  }
}

// ==================== 动画混入 ====================

/**
 * 淡入动画
 * @param {number} $duration - 动画时长，默认0.3s
 */
@mixin fade-in($duration: var(--animation-duration-slow)) {
  animation: fadeIn $duration var(--animation-timing-ease-in-out);
}

/**
 * 淡出动画
 * @param {number} $duration - 动画时长，默认0.3s
 */
@mixin fade-out($duration: var(--animation-duration-slow)) {
  animation: fadeOut $duration var(--animation-timing-ease-in-out);
}

/**
 * 滑入动画
 * @param {string} $direction - 方向 (up, down, left, right)
 * @param {number} $duration - 动画时长，默认0.3s
 */
@mixin slide-in($direction: up, $duration: var(--animation-duration-slow)) {
  animation: slideIn#{capitalize($direction)} $duration var(--animation-timing-ease-out);
}

/**
 * 缩放动画
 * @param {number} $duration - 动画时长，默认0.3s
 */
@mixin scale-in($duration: var(--animation-duration-slow)) {
  animation: scaleIn $duration var(--animation-timing-ease-out);
}

// ==================== 工具混入 ====================

/**
 * 清除浮动
 */
@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

/**
 * 绝对定位居中
 */
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/**
 * 固定宽高比
 * @param {number} $ratio - 宽高比，默认16/9
 */
@mixin aspect-ratio($ratio: 16/9) {
  position: relative;
  
  &::before {
    content: "";
    display: block;
    padding-top: percentage(1 / $ratio);
  }
  
  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

/**
 * 隐藏滚动条
 */
@mixin hide-scrollbar {
  -ms-overflow-style: none;
  scrollbar-width: none;
  
  &::-webkit-scrollbar {
    display: none;
  }
}

/**
 * 自定义滚动条
 * @param {number} $width - 滚动条宽度，默认6px
 * @param {color} $track-color - 轨道颜色
 * @param {color} $thumb-color - 滑块颜色
 */
@mixin custom-scrollbar($width: 6px, $track-color: #f1f1f1, $thumb-color: #c1c1c1) {
  &::-webkit-scrollbar {
    width: $width;
    height: $width;
  }
  
  &::-webkit-scrollbar-track {
    background: $track-color;
    border-radius: $width / 2;
  }
  
  &::-webkit-scrollbar-thumb {
    background: $thumb-color;
    border-radius: $width / 2;
    
    &:hover {
      background: darken($thumb-color, 10%);
    }
  }
}

/**
 * 三角形
 * @param {string} $direction - 方向 (up, down, left, right)
 * @param {number} $size - 大小
 * @param {color} $color - 颜色
 */
@mixin triangle($direction, $size, $color) {
  width: 0;
  height: 0;
  
  @if $direction == up {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
  } @else if $direction == down {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
  } @else if $direction == left {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
  } @else if $direction == right {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  }
}

// ==================== 辅助函数 ====================

/**
 * 首字母大写
 * @param {string} $string - 字符串
 */
@function capitalize($string) {
  @return to-upper-case(str-slice($string, 1, 1)) + str-slice($string, 2);
}