{
  "id": "snapshot_1759118523440_qgyyx9aw4",
  "approvalId": "approval_1759118523416_0udmmmvji",
  "approvalTitle": "Product Template Enhancement Design Document",
  "version": 1,
  "timestamp": "2025-09-29T04:02:03.440Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# 产品文档管理模板增强设计文档\r\n\r\n## Overview\r\n\r\n产品文档管理模板增强功能是对现有保险产品智能检核系统中产品文档管理模块的重要升级。该设计在保持现有架构和技术栈一致性的基础上，实现对两种新官方模板（备案产品自主注册信息登记表和农险产品信息登记表）的完整支持。\r\n\r\n设计采用模块化、可扩展的架构，通过配置驱动的方式实现模板类型管理，确保系统能够灵活适应未来更多模板类型的加入。所有新增功能严格遵循现有的代码规范、安全标准和性能要求。\r\n\r\n## Steering Document Alignment\r\n\r\n### Technical Standards (tech.md)\r\n\r\n**架构对齐**：\r\n- 遵循前后端分离架构：Vue 3 + TypeScript 前端，Spring Boot 后端\r\n- 使用现有技术栈：Ant Design Vue、MyBatis Plus、MySQL、Redis\r\n- 保持RESTful API设计模式，统一响应格式\r\n- 采用分层架构：Controller -> Service -> Repository -> Entity\r\n\r\n**集成策略**：\r\n- 复用现有的鉴权机制（JWT + Spring Security）\r\n- 遵循现有的异常处理和日志记录模式\r\n- 使用现有的配置管理和环境隔离策略\r\n- 保持与现有API网关和限流机制的兼容性\r\n\r\n**安全合规**：\r\n- 文件上传严格类型验证，防止恶意文件\r\n- 输入数据XSS和SQL注入防护\r\n- 敏感操作审计日志记录\r\n- 遵循现有的HTTPS和数据脱敏要求\r\n\r\n### Project Structure (structure.md)\r\n\r\n**代码组织遵循项目结构约定**：\r\n\r\n**后端模块化**：\r\n```\r\nbackend/src/main/java/com/insurance/audit/product/\r\n├── application/service/          # 业务服务层\r\n│   ├── TemplateService          # 新增：模板管理服务\r\n│   ├── ProductEnhancedService   # 增强：产品服务扩展\r\n│   └── ValidationService       # 增强：字段验证服务\r\n├── domain/entity/               # 领域实体\r\n│   ├── ProductTemplate         # 新增：模板配置实体\r\n│   └── Product                 # 增强：产品实体字段扩展\r\n├── infrastructure/mapper/       # 数据访问层\r\n│   └── ProductTemplateMapper   # 新增：模板数据访问\r\n└── interfaces/dto/              # 接口传输对象\r\n    ├── request/                 # 请求DTO\r\n    └── response/                # 响应DTO\r\n```\r\n\r\n**前端模块化**：\r\n```\r\nfrontend/src/\r\n├── components/product/          # 产品组件\r\n│   ├── TemplateDownload        # 新增：模板下载组件\r\n│   ├── EnhancedProductForm     # 增强：产品表单组件\r\n│   └── FieldValidation         # 新增：字段验证组件\r\n├── types/product/               # 类型定义\r\n│   └── template.ts             # 新增：模板相关类型\r\n├── api/product/                 # API服务\r\n│   └── template.ts             # 新增：模板API服务\r\n└── utils/                       # 工具函数\r\n    └── templateValidation.ts   # 新增：模板验证工具\r\n```\r\n\r\n**模块边界**：\r\n- 模板管理与现有产品管理解耦，通过接口交互\r\n- 字段验证逻辑独立封装，支持配置化扩展\r\n- 文件处理服务复用现有基础设施组件\r\n\r\n## Code Reuse Analysis\r\n\r\n### Existing Components to Leverage\r\n\r\n- **BaseEntity**: 复用现有实体基类，包含ID、创建时间、更新时间等通用字段\r\n- **ApiResponse**: 复用统一响应格式，保持API一致性\r\n- **GlobalExceptionHandler**: 复用全局异常处理机制\r\n- **AgriculturalProductForm.vue**: 扩展现有农险产品表单组件，增加新字段支持\r\n- **FilingProductForm.vue**: 扩展现有备案产品表单组件（如果存在）\r\n- **DocumentUploadComponent.vue**: 复用现有文档上传组件\r\n- **ProductService**: 扩展现有产品服务，增加模板相关业务逻辑\r\n- **DocumentValidationService**: 扩展现有文档验证服务\r\n\r\n### Integration Points\r\n\r\n- **现有产品管理API**: 扩展现有的ProductController，增加模板下载和字段配置接口\r\n- **现有数据库表**: 在products表基础上增加新字段，保持向后兼容\r\n- **现有文件存储**: 复用FileStorageService，存储模板文件和上传文档\r\n- **现有缓存机制**: 利用Redis缓存模板配置和字段验证规则\r\n- **现有权限系统**: 复用RBAC权限控制，确保模板下载和管理的安全性\r\n\r\n## Architecture\r\n\r\n系统采用经典的分层架构，结合领域驱动设计（DDD）原则，确保业务逻辑的清晰分离和技术实现的可维护性。\r\n\r\n### Modular Design Principles\r\n\r\n- **Single File Responsibility**: 每个文件专注于单一业务领域\r\n  - TemplateService.java：专门处理模板管理逻辑\r\n  - FieldValidationService.java：专门处理字段验证逻辑\r\n  - ProductTemplateMapper.java：专门处理模板数据访问\r\n- **Component Isolation**: 创建小型、专注的组件\r\n  - TemplateDownload.vue：专门处理模板下载UI\r\n  - FieldValidation.vue：专门处理字段验证UI\r\n  - DynamicForm.vue：专门处理动态表单渲染\r\n- **Service Layer Separation**: 分离数据访问、业务逻辑和表现层\r\n  - Controller层：处理HTTP请求响应\r\n  - Service层：处理业务逻辑和模板管理\r\n  - Repository层：处理数据持久化\r\n- **Utility Modularity**: 将工具函数拆分为专注的单一用途模块\r\n  - templateValidation.ts：模板验证工具\r\n  - fieldMapping.ts：字段映射工具\r\n  - excelParser.ts：Excel解析工具\r\n\r\n```mermaid\r\ngraph TD\r\n    A[前端UI层] --> B[API网关层]\r\n    B --> C[Controller层]\r\n    C --> D[Service业务层]\r\n    D --> E[Repository数据层]\r\n    E --> F[数据库]\r\n\r\n    D --> G[模板管理服务]\r\n    D --> H[字段验证服务]\r\n    D --> I[文件处理服务]\r\n\r\n    G --> J[模板配置存储]\r\n    H --> K[验证规则缓存]\r\n    I --> L[文件存储系统]\r\n```\r\n\r\n## Components and Interfaces\r\n\r\n### Component 1: TemplateService（模板管理服务）\r\n- **Purpose:** 管理产品模板的下载、配置和元数据\r\n- **Interfaces:**\r\n  - `List<TemplateInfo> getAvailableTemplates()`\r\n  - `byte[] downloadTemplate(String templateType)`\r\n  - `TemplateConfig getTemplateConfig(String templateType)`\r\n  - `void updateTemplateConfig(TemplateConfig config)`\r\n- **Dependencies:** FileStorageService、ProductTemplateMapper、Redis缓存\r\n- **Reuses:** 现有的FileStorageService用于文件管理，ApiResponse用于统一响应\r\n\r\n### Component 2: EnhancedProductForm（增强产品表单组件）\r\n- **Purpose:** 渲染动态产品表单，支持双模板字段配置\r\n- **Interfaces:**\r\n  - `@prop templateType: string`\r\n  - `@event formSubmit(formData: ProductFormData)`\r\n  - `@event templateChange(templateType: string)`\r\n- **Dependencies:** FieldValidation组件、模板API服务、表单验证工具\r\n- **Reuses:** 现有的AgriculturalProductForm.vue作为基础，扩展字段支持\r\n\r\n### Component 3: FieldValidationService（字段验证服务）\r\n- **Purpose:** 提供基于模板规则的字段验证功能\r\n- **Interfaces:**\r\n  - `ValidationResult validateField(String fieldName, Object value, String templateType)`\r\n  - `List<ValidationError> validateForm(Map<String, Object> formData, String templateType)`\r\n  - `void loadValidationRules(String templateType)`\r\n- **Dependencies:** ValidationRuleRepository、模板配置缓存\r\n- **Reuses:** 现有的DocumentValidationService验证机制\r\n\r\n### Component 4: TemplateDownload（模板下载组件）\r\n- **Purpose:** 提供模板选择和下载功能\r\n- **Interfaces:**\r\n  - `@prop availableTemplates: TemplateInfo[]`\r\n  - `@event downloadTemplate(templateType: string)`\r\n- **Dependencies:** TemplateAPI服务、文件下载工具\r\n- **Reuses:** 现有的文件下载机制和UI组件样式\r\n\r\n### Component 5: ProductTemplateMapper（模板数据访问层）\r\n- **Purpose:** 处理产品模板相关的数据库操作\r\n- **Interfaces:**\r\n  - `int insertTemplate(ProductTemplate template)`\r\n  - `ProductTemplate selectByType(String templateType)`\r\n  - `List<ProductTemplate> selectAllTemplates()`\r\n  - `int updateTemplate(ProductTemplate template)`\r\n- **Dependencies:** MyBatis Plus、MySQL数据库\r\n- **Reuses:** 现有的BaseMapper接口和数据库连接配置\r\n\r\n## Data Models\r\n\r\n### ProductTemplate（产品模板实体）\r\n```java\r\n@TableName(\"product_templates\")\r\npublic class ProductTemplate extends BaseEntity {\r\n    // 模板类型（备案产品/农险产品）\r\n    private String templateType;\r\n\r\n    // 模板名称\r\n    private String templateName;\r\n\r\n    // 模板文件路径\r\n    private String templateFilePath;\r\n\r\n    // 字段配置JSON\r\n    private String fieldConfig;\r\n\r\n    // 验证规则JSON\r\n    private String validationRules;\r\n\r\n    // 是否启用\r\n    private Boolean enabled;\r\n\r\n    // 模板版本\r\n    private String version;\r\n}\r\n```\r\n\r\n### EnhancedProduct（增强产品实体）\r\n```java\r\n@TableName(\"products\")\r\npublic class Product extends BaseEntity {\r\n    // 现有字段保持不变...\r\n\r\n    // 新增备案产品字段\r\n    private String developmentType;      // 开发类型\r\n    private String demonstrationClause;  // 示范条款名称\r\n    private String businessScope;        // 经营范围\r\n    private String businessArea1;        // 经营区域1\r\n    private String businessArea2;        // 经营区域2\r\n    private String productProperty;      // 产品属性\r\n    private String basicRate;           // 基础费率\r\n    private String basicRateTable;      // 基础费率表\r\n    private Boolean hasElectronicPolicy; // 是否有电子保单\r\n    private Boolean hasNationalEncryption; // 是否是国产加密算法\r\n    private String insurancePeriod;      // 保险期间\r\n    private String insuranceResponsibility; // 保险责任\r\n    private String salesPromotionName;   // 销售推广名称\r\n    private String salesArea;           // 销售区域\r\n    private String salesChannel;        // 销售渠道\r\n\r\n    // 新增农险产品字段\r\n    private Integer revisionCount;       // 修订次数\r\n    private String insuranceTarget;      // 保险标的\r\n    private Boolean isOperated;         // 是否开办\r\n    private String operationDate;       // 开办日期\r\n    private String rateFloatingRange;   // 费率浮动区间\r\n    private String rateFloatingCoefficient; // 费率浮动系数\r\n    private String absoluteDeductible;  // 绝对免赔率（额）\r\n    private String relativeDeductible;  // 相对免赔率（额）\r\n    private String remarks;             // 备注栏\r\n\r\n    // 模板类型标识\r\n    private String templateType;        // 模板类型\r\n}\r\n```\r\n\r\n### TemplateFieldConfig（模板字段配置）\r\n```typescript\r\ninterface TemplateFieldConfig {\r\n  fieldName: string;           // 字段名称\r\n  fieldType: 'input' | 'select' | 'textarea' | 'number' | 'date';\r\n  required: boolean;           // 是否必填\r\n  maxLength?: number;          // 最大长度\r\n  options?: string[];          // 下拉选项\r\n  placeholder?: string;        // 占位符\r\n  validationRules?: ValidationRule[];\r\n  dependsOn?: string;          // 依赖字段\r\n  showWhen?: DependencyCondition; // 显示条件\r\n}\r\n\r\ninterface ValidationRule {\r\n  type: 'required' | 'minLength' | 'maxLength' | 'pattern' | 'custom';\r\n  value?: any;\r\n  message: string;\r\n  validator?: string;          // 自定义验证器名称\r\n}\r\n```\r\n\r\n## Error Handling\r\n\r\n### Error Scenarios\r\n\r\n1. **模板文件不存在或损坏**\r\n   - **Handling:** 返回HTTP 404错误，记录错误日志，提供模板恢复建议\r\n   - **User Impact:** 显示\"模板文件暂不可用，请联系管理员\"的友好错误提示\r\n\r\n2. **Excel文件解析失败**\r\n   - **Handling:** 捕获解析异常，返回具体的格式错误信息，提供修正建议\r\n   - **User Impact:** 显示详细的错误位置和修正指导\r\n\r\n3. **字段验证失败**\r\n   - **Handling:** 收集所有验证错误，批量返回错误详情\r\n   - **User Impact:** 在对应字段下方显示红色错误提示，阻止表单提交\r\n\r\n4. **数据存储失败**\r\n   - **Handling:** 事务回滚，记录详细错误日志，返回通用错误信息\r\n   - **User Impact:** 显示\"数据保存失败，请重试\"提示，保留用户输入数据\r\n\r\n5. **网络请求超时**\r\n   - **Handling:** 自动重试机制（最多3次），超时后返回友好错误\r\n   - **User Impact:** 显示加载状态，超时后提供重试按钮\r\n\r\n6. **权限验证失败**\r\n   - **Handling:** 返回HTTP 403错误，记录访问日志\r\n   - **User Impact:** 跳转到权限不足提示页面\r\n\r\n7. **文件上传大小超限**\r\n   - **Handling:** 前端预检查文件大小，后端二次验证\r\n   - **User Impact:** 实时显示文件大小限制提示\r\n\r\n8. **并发操作冲突**\r\n   - **Handling:** 使用乐观锁机制，检测数据版本冲突\r\n   - **User Impact:** 提示数据已被其他用户修改，建议刷新后重试\r\n\r\n## Testing Strategy\r\n\r\n### Unit Testing\r\n\r\n**后端测试覆盖**：\r\n- Service层测试：验证业务逻辑正确性，模拟依赖组件\r\n- Mapper层测试：使用TestContainers测试数据库操作\r\n- 工具类测试：验证Excel解析、字段验证等工具函数\r\n- 覆盖率要求：新增代码单元测试覆盖率≥85%\r\n\r\n**前端测试覆盖**：\r\n- 组件测试：使用Vue Test Utils测试组件渲染和交互\r\n- 工具函数测试：验证验证规则、字段映射等工具函数\r\n- 状态管理测试：测试Pinia store的状态变更逻辑\r\n- 覆盖率要求：新增代码单元测试覆盖率≥80%\r\n\r\n### Integration Testing\r\n\r\n**API集成测试**：\r\n- 模板下载接口测试：验证文件下载流程\r\n- 产品创建接口测试：验证完整的数据流转\r\n- 字段验证接口测试：验证各种验证场景\r\n- 文件上传接口测试：验证文件解析和存储\r\n\r\n**数据库集成测试**：\r\n- 使用TestContainers启动真实MySQL环境\r\n- 验证数据库迁移脚本的正确性\r\n- 测试复杂查询和事务操作\r\n- 验证数据一致性和约束条件\r\n\r\n### End-to-End Testing\r\n\r\n**用户场景测试**：\r\n- 完整产品导入流程：模板下载 → 填写表单 → 文件上传 → 提交成功\r\n- 字段验证流程：错误输入 → 验证提示 → 修正后成功提交\r\n- 模板切换流程：切换模板类型 → 表单重新渲染 → 字段正确显示\r\n- 错误处理流程：网络异常 → 错误提示 → 重试成功\r\n\r\n**兼容性测试**：\r\n- 多浏览器兼容性测试（Chrome、Firefox、Safari、Edge）\r\n- 响应式设计测试（桌面、平板、手机）\r\n- 历史数据兼容性测试（确保现有数据正常显示）\r\n\r\n**性能测试**：\r\n- 文件上传性能测试（5MB文件上传时间≤30秒）\r\n- 表单渲染性能测试（30个字段表单渲染时间≤1秒）\r\n- 并发用户测试（100个并发用户，响应时间≤3秒）\r\n\r\n**安全测试**：\r\n- 文件上传安全测试（恶意文件检测）\r\n- 输入验证安全测试（XSS、SQL注入防护）\r\n- 权限控制测试（未授权访问阻断）",
  "fileStats": {
    "size": 15113,
    "lines": 358,
    "lastModified": "2025-09-29T04:01:30.413Z"
  },
  "comments": []
}